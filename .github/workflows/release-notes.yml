name: Generate & Commit Detailed Release Notes

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
      environment:
        description: "Target environment (e.g., Production)"
        required: true
        default: "Production"
      overview:
        description: "Short overview of the release"
        required: true
      start_date:
        description: "Start date for PR collection (YYYY-MM-DD)"
        required: true
      end_date:
        description: "End date for PR collection (YYYY-MM-DD, optional, default = today)"
        required: false
      release_type:
        description: "Release type for this deployment (e.g., Major | Minor | Patch | Hotfix)."
        required: true
      previous_release_version:
        description: "Previous stable release version to be used in case of failure."
        required: true
      technical_changes:
        description: "Technical changes (e.g., infrastructure updates, library upgrades, refactoring)"
        required: true
      release_manager:
        description: "Name of the Release Manager responsible for coordinating the deployment"
        required: true
      test_lead:
        description: "Name of the Test/QA Lead responsible for validation"
        required: true
      tech_lead:
        description: "Name of the Technical Lead responsible for technical oversight and approval"
        required: true

jobs:
  generate-and-commit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Current Date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Set End Date
        id: enddate
        run: |
          if [ -z "${{ github.event.inputs.end_date }}" ]; then
            echo "end_date=${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
          else
            echo "end_date=${{ github.event.inputs.end_date }}" >> $GITHUB_OUTPUT
          fi

      - name: Generate Detailed Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          OVERVIEW="${{ github.event.inputs.overview }}"
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ steps.enddate.outputs.end_date }}"
          NOTES_FILE="release-notes-${VERSION}.md"
          OWNER="${{ github.repository_owner }}"
          REPO_NAME=$(basename "${{ github.repository }}")
          RELEASE_TYPE=${{ github.event.inputs.release_type}}
          PREVIOUS_RELEASE_VERSION="${{ github.event.inputs.previous_release_version }}"
          RELEASE_MANAGER="${{ github.event.inputs.release_manager }}"
          TEST_LEAD="${{ github.event.inputs.test_lead }}"
          TECH_LEAD="${{ github.event.inputs.tech_lead }}"
          
          echo "# $ENVIRONMENT Release Notes" > "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          echo "| Key | Value |" >> "$NOTES_FILE"
          echo "| --- | ----- |" >> "$NOTES_FILE"
          echo "| Version | $VERSION |" >> "$NOTES_FILE"
          echo "| Release Date | $END_DATE |" >> "$NOTES_FILE"
          echo "| Environment | $ENVIRONMENT |" >> "$NOTES_FILE"
          echo "| Release Type | $RELEASE_TYPE |" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          echo "## 1. Overview" >> "$NOTES_FILE"
          echo "$OVERVIEW" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          echo "## 2. Merged Pull Requests from $START_DATE to $END_DATE" >> "$NOTES_FILE"
          echo "| PR | Commit | Title | Author | Labels |" >> "$NOTES_FILE"
          echo "|----|--------|-------|--------|--------|" >> "$NOTES_FILE"
          
          page=1
          per_page=50
          
          while : ; do
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/search/issues?q=repo:${OWNER}/${REPO_NAME}+is:pr+is:merged+merged:${START_DATE}..${END_DATE}&per_page=${per_page}&page=${page}")
          
            count=$(echo "$response" | jq '.items | length')
          
            if [ "$count" -eq 0 ]; then
              break
            fi
          
            for i in $(seq 0 $((count - 1))); do
              number=$(echo "$response" | jq -r ".items[$i].number")
              title=$(echo "$response" | jq -r ".items[$i].title" | sed 's/|/\\|/g')
              user=$(echo "$response" | jq -r ".items[$i].user.login")
              labels=$(echo "$response" | jq -r ".items[$i].labels | map(.name) | join(\", \")")
              [ -z "$labels" ] && labels="-"
          
              # Get merge commit SHA
              merge_commit_sha=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${OWNER}/${REPO_NAME}/pulls/$number" | jq -r '.merge_commit_sha')
              short_sha=${merge_commit_sha:0:7}
          
              echo "| [#$number](https://github.com/$OWNER/$REPO_NAME/pull/$number) | [\`$short_sha\`](https://github.com/$OWNER/$REPO_NAME/commit/$merge_commit_sha) | $title | $user | $labels |" >> "$NOTES_FILE"
            done
          
            page=$((page + 1))
          done


          echo "" >> "$NOTES_FILE"
          echo "## 3. Technical Changes" >> "$NOTES_FILE"
          echo "- _Library upgrades, infra changes, refactoring, etc._" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          echo "## 4. Post-Deployment Checks" >> "$NOTES_FILE"
          echo "- Smoke testing" >> "$NOTES_FILE"
          echo "- Dashboard & API monitoring" >> "$NOTES_FILE"
          echo "- Log analysis" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          echo "## 5. Stakeholders" >> "$NOTES_FILE"
          echo "| Role | Name | Responsibility |" >> "$NOTES_FILE"
          echo "|------|------|----------------|" >> "$NOTES_FILE"
          echo "| Release Manager | $RELEASE_MANAGER | Oversees deployment |" >> "$NOTES_FILE"
          echo "| Test Lead | $TEST_LEAD | Post-deployment validation |" >> "$NOTES_FILE"
          echo "| Tech Lead | $TECH_LEAD | Technical sign-off |" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          echo "## 6. Rollback Plan" >> "$NOTES_FILE"
          echo "- Rollback to previous stable version ($PREVIOUS_RELEASE_VERSION) if critical failure occurs." >> "$NOTES_FILE"
          echo "- DB schema is backward compatible (if any)." >> "$NOTES_FILE"
          echo ""

      - name: Move File to release-notes Folder
        run: |
          mkdir -p release-notes
          mv release-notes-${{ github.event.inputs.version }}.md release-notes/

      - name: Commit and Push Release Notes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release-notes/release-notes-${{ github.event.inputs.version }}.md
          git commit -m "chore: add release notes for ${{ github.event.inputs.version }}" || echo "No changes to commit"
          git push
