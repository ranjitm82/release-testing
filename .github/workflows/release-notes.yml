- name: Generate Detailed Release Notes
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
run: |
  VERSION="${{ github.event.inputs.version }}"
  ENVIRONMENT="${{ github.event.inputs.environment }}"
  OVERVIEW="${{ github.event.inputs.overview }}"
  START_DATE="${{ github.event.inputs.start_date }}"
  END_DATE="${{ steps.enddate.outputs.end_date }}"
  NOTES_FILE="release-notes-${VERSION}.md"
  OWNER="${{ github.repository_owner }}"
  REPO="${{ github.repository }}"

  # Header
  echo "# 🚀 Production Release Notes" > $NOTES_FILE
  echo "" >> $NOTES_FILE

  # Summary Table
  echo "| Key | Value |" >> $NOTES_FILE
  echo "| --- | ----- |" >> $NOTES_FILE
  echo "| Version | $VERSION |" >> $NOTES_FILE
  echo "| Release Date | $END_DATE |" >> $NOTES_FILE
  echo "| Environment | $ENVIRONMENT |" >> $NOTES_FILE
  echo "| Release Type | Scheduled / Major |" >> $NOTES_FILE
  echo "| Downtime | None |" >> $NOTES_FILE
  echo "" >> $NOTES_FILE

  # Overview
  echo "## 🧭 1. Overview" >> $NOTES_FILE
  echo "$OVERVIEW" >> $NOTES_FILE
  echo "" >> $NOTES_FILE

  # PRs Table Header
  echo "## 🗂️ 2. Merged Pull Requests from $START_DATE to $END_DATE" >> $NOTES_FILE
  echo "| PR | Commit | Title | Author | Labels |" >> $NOTES_FILE
  echo "|----|--------|-------|--------|--------|" >> $NOTES_FILE

  page=1
  per_page=50

  while : ; do
    response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
      "https://api.github.com/search/issues?q=repo:$OWNER/$REPO+is:pr+is:merged+merged:$START_DATE..$END_DATE&per_page=$per_page&page=$page")

    count=$(echo "$response" | jq '.items | length')

    if [ "$count" -eq 0 ]; then
      break
    fi

    for i in $(seq 0 $(($count - 1))); do
      number=$(echo "$response" | jq -r ".items[$i].number")
      title=$(echo "$response" | jq -r ".items[$i].title" | sed 's/|/\\|/g')
      user=$(echo "$response" | jq -r ".items[$i].user.login")
      labels=$(echo "$response" | jq -r ".items[$i].labels | map(.name) | join(\", \")")
      if [ -z "$labels" ]; then labels="-"; fi

      # Fetch merge_commit_sha for each PR
      merge_commit_sha=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$OWNER/$REPO/pulls/$number" | jq -r '.merge_commit_sha')

      echo "| #$number | \`$merge_commit_sha\` | $title | $user | $labels |" >> $NOTES_FILE
    done

    page=$((page + 1))
  done

  echo "" >> $NOTES_FILE

  # Additional sections
  echo "## 🧱 3. Technical Changes" >> $NOTES_FILE
  echo "- _Library upgrades, infra changes, refactoring, etc._" >> $NOTES_FILE
  echo "" >> $NOTES_FILE

  echo "## 🧪 4. Post-Deployment Checks" >> $NOTES_FILE
  echo "- Smoke testing" >> $NOTES_FILE
  echo "- Dashboard & API monitoring" >> $NOTES_FILE
  echo "- Log analysis" >> $NOTES_FILE
  echo "" >> $NOTES_FILE

  echo "## 🧍 5. Stakeholders" >> $NOTES_FILE
  echo "| Role | Name | Responsibility |" >> $NOTES_FILE
  echo "|------|------|----------------|" >> $NOTES_FILE
  echo "| Release Coordinator | John Doe | Oversees deployment |" >> $NOTES_FILE
  echo "| QA Lead | Jane Smith | Post-deployment validation |" >> $NOTES_FILE
  echo "| Dev Lead | Ranjit Kumar | Technical sign-off |" >> $NOTES_FILE
  echo "" >> $NOTES_FILE

  echo "## 📝 6. Rollback Plan" >> $NOTES_FILE
  echo "- Rollback to previous stable version (vX.X.X) if critical failure occurs." >> $NOTES_FILE
  echo "- DB schema is backward compatible." >> $NOTES_FILE
  echo ""
