# -----------------------------------------------------
# Generate Release Notes based on PRs and Config Input
# -----------------------------------------------------

# Name displayed on the ‘Actions’ page — used to identify and manually start the workflow
name: Generate Rewards Gateway Release Notes

permissions:
  contents: write

# This input will be a JSON object passed via GUI or automation
on:
  workflow_dispatch:
    inputs:
      config:
        description: "JSON string with all release details"
        required: true

jobs:
  generate-and-commit:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository so we can write files to it
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Parse Config JSON
        id: parse
        run: |
          echo '${{ github.event.inputs.config }}' > config.json
          VERSION=$(jq -r '.version' config.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Generate the release notes Markdown file
      - name: Generate Detailed Release Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CONFIG_JSON='${{ github.event.inputs.config }}'
          echo "$CONFIG_JSON" > config.json

          # Extract all input fields from JSON
          SERVICE=$(jq -r '.service' config.json)
          VERSION=$(jq -r '.version' config.json)
          ENVIRONMENT=$(jq -r '.environment' config.json)
          TEAM=$(jq -r '.team' config.json)
          OVERVIEW=$(jq -r '.overview' config.json)
          START_DATE=$(jq -r '.pr_start_date' config.json)
          END_DATE=$(jq -r '.pr_end_date' config.json)
          RELEASE_DATE=$(jq -r '.release_date' config.json)
          RELEASE_TYPE=$(jq -r '.release_type' config.json)
          PREVIOUS_RELEASE_VERSION=$(jq -r '.previous_release_version' config.json)
          TECHNICAL_CHANGES=$(jq -r '.technical_changes' config.json)
          RELEASE_MANAGER=$(jq -r '.release_manager' config.json)
          TEST_LEAD=$(jq -r '.test_lead' config.json)
          TECH_LEAD=$(jq -r '.tech_lead' config.json)
          JIRA_TICKET=$(jq -r '.jira_ticket' config.json)

          NOTES_FILE="release-notes-${VERSION}.md"
          OWNER="${{ github.repository_owner }}"
          REPO_NAME=$(basename "${{ github.repository }}")

          # Title Header
          echo "# $ENVIRONMENT Release Notes" > "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          # Summary Table
          echo "| Key | Value |" >> "$NOTES_FILE"
          echo "| --- | ----- |" >> "$NOTES_FILE"
          echo "| Service | $SERVICE |" >> "$NOTES_FILE"
          echo "| Release Version | $VERSION |" >> "$NOTES_FILE"
          echo "| Environment | $ENVIRONMENT |" >> "$NOTES_FILE"
          echo "| Team | $TEAM |" >> "$NOTES_FILE"
          echo "| Release Type | $RELEASE_TYPE |" >> "$NOTES_FILE"
          echo "| Release Date | $RELEASE_DATE |" >> "$NOTES_FILE"
          echo "| Jira Ticket | $JIRA_TICKET |" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          # Summary of the deployment
          echo "## 1. Overview" >> "$NOTES_FILE"
          echo "$OVERVIEW" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          # Pull Requests Table
          echo "## 2. Merged Pull Requests from $START_DATE to $END_DATE" >> "$NOTES_FILE"
          echo "| PR | Commit | Title | Author | Labels |" >> "$NOTES_FILE"
          echo "|----|--------|-------|--------|--------|" >> "$NOTES_FILE"

          # Pagination in case of many PRs
          page=1
          per_page=50

          while : ; do
            # Fetch merged PRs from GitHub API
            response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/search/issues?q=repo:${OWNER}/${REPO_NAME}+is:pr+is:merged+merged:${START_DATE}..${END_DATE}&per_page=${per_page}&page=${page}")

            count=$(echo "$response" | jq '.items | length')
            # Break loop if no more PRs
            [ "$count" -eq 0 ] && break

            for i in $(seq 0 $((count - 1))); do
              number=$(echo "$response" | jq -r ".items[$i].number")
              title=$(echo "$response" | jq -r ".items[$i].title" | sed 's/|/\\|/g')
              user=$(echo "$response" | jq -r ".items[$i].user.login")
              labels=$(echo "$response" | jq -r ".items[$i].labels | map(.name) | join(\", \")")
              [ -z "$labels" ] && labels="-"

              # Get commit SHA
              merge_commit_sha=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${OWNER}/${REPO_NAME}/pulls/$number" | jq -r '.merge_commit_sha')
              short_sha=${merge_commit_sha:0:7}

              echo "| [#$number](https://github.com/$OWNER/$REPO_NAME/pull/$number) | [\`$short_sha\`](https://github.com/$OWNER/$REPO_NAME/commit/$merge_commit_sha) | $title | $user | $labels |" >> "$NOTES_FILE"
            done
            page=$((page + 1))
          done

          # Technical Changes
          echo "" >> "$NOTES_FILE"
          echo "## 3. Technical Changes" >> "$NOTES_FILE"
          echo "$TECHNICAL_CHANGES" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          # Post Deployment Checks
          echo "## 4. Post-Deployment Checks" >> "$NOTES_FILE"
          echo "- Smoke testing" >> "$NOTES_FILE"
          echo "- Dashboard & API monitoring" >> "$NOTES_FILE"
          echo "- Log analysis" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          # Stakeholders Table
          echo "## 5. Stakeholders" >> "$NOTES_FILE"
          echo "| Role | Name | Responsibility |" >> "$NOTES_FILE"
          echo "|------|------|----------------|" >> "$NOTES_FILE"
          echo "| Release Manager | $RELEASE_MANAGER | Oversees deployment |" >> "$NOTES_FILE"
          echo "| Test Lead | $TEST_LEAD | Post-deployment validation |" >> "$NOTES_FILE"
          echo "| Tech Lead | $TECH_LEAD | Technical sign-off |" >> "$NOTES_FILE"
          echo "" >> "$NOTES_FILE"

          # Rollback Plan
          echo "## 6. Rollback Plan" >> "$NOTES_FILE"
          echo "- Rollback to previous stable version ($PREVIOUS_RELEASE_VERSION) if critical failure occurs." >> "$NOTES_FILE"
          echo "- DB schema is backward compatible (if any)." >> "$NOTES_FILE"

      # Move the generated markdown file to the release-notes folder
      - name: Move File to release-notes Folder
        run: |
          mkdir -p release-notes
          FILE="release-notes-${{ steps.parse.outputs.version }}.md"
          if [ -f "$FILE" ]; then
            mv "$FILE" release-notes/
          else
            echo "File $FILE not found. Skipping move."
            exit 1
          fi

      # Commit and push the release notes file
      - name: Commit and Push Release Notes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add release-notes/
          git commit -m "chore: add release notes for version ${{ steps.parse.outputs.version }}" || echo "No changes to commit"
          git push
